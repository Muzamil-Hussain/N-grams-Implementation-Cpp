#include<iostream>
#include<fstream>
#include<string>
using namespace std;

char * text;
char ** Ngram;
int * NgramCount;
int NumOfWords;
int NumOfNgrams;
int endOfNgrams;
int sizeOfText;
int* startingPoints;int* endingPoints;
int* indecesOfDotsForInserting;
int incReqInsertDot=0;
template<typename T>int getEndPointForNGram(int N, T c1, T c2) {int end = -1;int count = 0;bool notFound = true;for(int j = sizeOfText-2; j>=0 && notFound; j--) {	if(j == 0) {		end = j;		notFound = false;	} else {		if(text[j] == c1 || text[j] == c2) {			count++;		}	}	if(count == N) {		end = j;		notFound = false;	}}end += 2;return end;}template<typename U>int getNumOfWordsFromFileOnBasisOf(U c1, U c2) {	int NumOfWords = 0;	for(int i = 0 ; text[i] != '\0'; i++) {		if(text[i] == c1) {			if(i>0 && text[i-1]!=c1) {				NumOfWords++;			}			NumOfWords++;		} else if(text[i]==c2) {			NumOfWords++;		}	}	return NumOfWords;}void readInput(const char* Path) {		ifstream textFile;	string fileContainer;	const char* tempFileContainer; //stores the text file temporarily which is then stored in the original array to be used (i.e. 'text') .
	textFile.open(Path);
	getline(textFile,fileContainer,'\0');	tempFileContainer = fileContainer.c_str();	text = new char[fileContainer.length()+1];	for(int i=0;i<fileContainer.length();i++) {		text[i] = tempFileContainer[i];	}	text[fileContainer.length()] = '\0';		sizeOfText = fileContainer.length()+1;	indecesOfDotsForInserting = new int[sizeOfText];	indecesOfDotsForInserting[0] = 1;	for (int i = 1; i<sizeOfText-1; i++){		indecesOfDotsForInserting[i] = 0;	}		}bool outOfRange(char in,int p1, int p2) {	bool result;	(int(in)<p1 || int(in)>p2)?result=true:result=false;	return result;}void removePunctucationMarks() {	for(int i = 0 ; text[i]!='\0'; i++) {		if( (outOfRange(text[i], 97,122) && outOfRange(text[i],65,90) && outOfRange(text[i],48,57) && text[i] != '.') || (text[i]=='\n')) {			text[i] = ' ';		}	}}void removeSpacing() {		int countOfSpacesAfterDot = 0;	int* indecesOfSpacesAfterDot = new int[sizeOfText];	for (int i = 0 ; i < sizeOfText; i++) {		indecesOfSpacesAfterDot[i] = 0;	}	for(int i = 0; i < sizeOfText; i++) {				if(text[i] == '.' || (text[i]==' ' && i==0)) {			int z;			if(text[i]==' ' && i==0) {				z = i;			} else {				z = i+1;			}			for(; text[z] == ' ' && z < sizeOfText ; z++) {				indecesOfSpacesAfterDot[z] = 1;				countOfSpacesAfterDot++;							}		}	}	char* tempFileContainer = new char[(sizeOfText - countOfSpacesAfterDot)+1];	int index = 0;	for(int p = 0; p < sizeOfText; p++) {		if (indecesOfSpacesAfterDot[p] != 1) {			tempFileContainer[index] = text[p];			index++;		}	}	tempFileContainer[sizeOfText - countOfSpacesAfterDot] = '\0';		delete[] indecesOfSpacesAfterDot;	delete[] text;	text = new char[index+1];	for(int i=0;i<index;i++) {		text[i] = tempFileContainer[i];	}	text[index] = '\0';	sizeOfText = index;	delete[] tempFileContainer;	indecesOfDotsForInserting[index-1] = 1;		int * indecesOfSpaces = new int[sizeOfText];	for(int f=0;f<sizeOfText;f++) {		indecesOfSpaces[f] = 0;	}	int ind = 0;	int countOfSpaces = 0;	for(int i=0;text[i]!='\0';i++) {		if(text[i] == ' ') {			for(int j = i+1;text[j]==' ';j++) {				indecesOfSpaces[j] = 1;				countOfSpaces++;			}		}	}		int *exS = new int[100];	int tIndex = 0;	int cexS = 0;	char * tempArray = new char[sizeOfText];	for(int p=0;p<sizeOfText;p++) {		if(indecesOfSpaces[p]!=1) {			tempArray[ind] = text[p];						if(tempArray[ind] == '.' && tempArray[ind-1] == ' ' && ind>0) {				if(tIndex < 100){					exS[tIndex] = ind-1;					cexS++;					tIndex++;				}			}						ind++;		}	}		if(tempArray[ind-2] == ' ') {		for(int op = ind-2;tempArray[op]==' ';op--) {			exS[tIndex] = op;			tIndex++;		}	}	if(tIndex < 100) {		exS[tIndex] = -1;}	tempArray[ind]='\0';	sizeOfText = (ind+1);		int nIn=0;	int y=0;	delete[] text;	text = new char[sizeOfText];	for(int i=0;i<sizeOfText;i++) {		if(i!=exS[nIn]){			text[y] = tempArray[i];			y++;		} else {			nIn++;		}	}	delete []exS;	}void insertDots() {		int extraSize = 0;	if(text[0]=='.'){extraSize++;}else{extraSize+=2;}	if(text[sizeOfText-2] == '.') {extraSize++;}else{extraSize+=2;}	indecesOfDotsForInserting[0] = 1;	for(int i=1;text[i]!='\0';i++) {		if(text[i]=='.') {			if(indecesOfDotsForInserting[i-1]!=1) {				indecesOfDotsForInserting[i] = 1;				extraSize++;			}		}	}	sizeOfText += extraSize;	char* tempFileContainer = new char[sizeOfText];	int index = 0;	tempFileContainer[index]='.';	index++;	int i;	for(i=0;text[i]!='\0';i++) {		if(indecesOfDotsForInserting[i]==1) {			tempFileContainer[index] = '.';			tempFileContainer[index+1] = text[i];						index+=2;		} else {			tempFileContainer[index] = text[i];			index++;		}	}		if(text[i-1]!='.') {		if(text[i-1]=='.') {			tempFileContainer[index]='.';			index++;		} else {			tempFileContainer[index]='.';			index++;			tempFileContainer[index]='.';			index++;		}	}					tempFileContainer[index] = '\0';	delete[] text;	sizeOfText = index+1;	text = new char[sizeOfText];	for(int copy=0;tempFileContainer[copy]!='\0';copy++) {		text[copy] = tempFileContainer[copy];	}	text[index] = '\0'; 	}char * getText() {	return text;}void fill_SE_array() {int SE_Index = 0;for(int i = 0; text[i] != '\0'; i++) {	if(text[i] == '.') {		if(i>0 && text[i-1] != '.') {			int j;			for (j = i-1;text[j]!=' ';j--) {			}			startingPoints[SE_Index] = j + 1;			endingPoints[SE_Index] = i - 1;			SE_Index++;			startingPoints[SE_Index] = i;			endingPoints[SE_Index] = i;			SE_Index++;				} else {			startingPoints[SE_Index] = i;			endingPoints[SE_Index] = i;			SE_Index++;		}	} else if(text[i] == ' ') {		int k;		for(k = i - 1; (text[k] != '.' && text[k] != ' ') ; k--) {		}		startingPoints[SE_Index] = k + 1;		endingPoints[SE_Index] = i - 1;		SE_Index++;	} }}void generateNgrams(int N) {	NumOfWords = getNumOfWordsFromFileOnBasisOf<char>('.',' ');	int *countNgram = new int[NumOfWords];	startingPoints = new int[NumOfWords];	endingPoints = new int[NumOfWords];	fill_SE_array();	bool permissionToAddNgram = true;	NumOfNgrams = ( NumOfWords - (N - 1) );	Ngram = new char* [NumOfNgrams];	int mainIndex = 0;	NgramCount = new int[NumOfNgrams];	for(int i = 0; i  < NumOfNgrams; i++) {		NgramCount[i] = 1;	}	endOfNgrams = 0;	int NgramSize = 0;	int numOfSpaces = 0;	char* tempStorage;	int tempStorageSize = 0;	for (int i = 0; i < NumOfNgrams; i++) {				permissionToAddNgram = true;		tempStorageSize = 0;		numOfSpaces = 0;		for(int j = i; j < (i + N); j++) {						tempStorageSize += ( endingPoints[j] - startingPoints[j] ) + 1;			numOfSpaces++;		}		NgramSize = tempStorageSize + numOfSpaces;		tempStorage = new char[NgramSize+1];		Ngram[mainIndex] = new char[NgramSize+1];		int indi = 0;		int s = i;						for(int e = startingPoints[i]; e <= endingPoints[i+N-1]; e++) {			Ngram[mainIndex][indi] = text[e];			indi++;			if(e == endingPoints[s]) {				Ngram[mainIndex][indi] = ' ';				indi++;				s++;			}		}		Ngram[mainIndex][indi] = '\0';				for(int oooo = 0;oooo < mainIndex; oooo++) {			if(strcmp(Ngram[oooo],Ngram[mainIndex]) == 0) {				permissionToAddNgram = false;				NgramCount[oooo]++;			}		}		if(permissionToAddNgram){			mainIndex++;		} else {						permissionToAddNgram = true;		}								}	ofstream NgramPen;	if(N == 1){		NgramPen.open("unigram.txt");	}else if(N==2){		NgramPen.open("bigram.txt");	}else if(N==3){		NgramPen.open("trigram.txt");	}			for(int y = 0; y<mainIndex; y++)			NgramPen<<Ngram[y]<<NgramCount[y]<<endl;}void generateUnigrams() {	generateNgrams(1);}void generateBigrams() {	generateNgrams(2);}void generateTrigrams() {	generateNgrams(3);}